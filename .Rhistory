"numeric"
}
} else {
class(cl)
}
})
#### Record Variables into the Dictionary Template --------------
Variable = data.frame(matrix(nrow = length(names(Data)), ncol = 5))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
Variable$Variable = names(Data)
Variable$Type = unname(Class)
### Unique Values -----------------------------
UniqueValues = sapply(Data,function(cl){
UniqueLevel = unique(cl)
NAValue = UniqueLevel[which(is.na(UniqueLevel))]
if(length(UniqueLevel)>20) UniqueLevel = NAValue
UniqueLevel
})
repLength = sapply(UniqueValues,length)
### Variable Names
var = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(names(repLength)[[x]],repLength[[x]])
}))
### Variable Type
typ = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(Class[[x]],repLength[[x]])
}))
car
var
unname(unlist(UniqueValues))
length(UniqueValues)
length(UniqueValues)
length(unlist(UniqueValues))
Value[names(Value)] = ""
Value =  data.frame(matrix(nrow = length(var), ncol = 6))
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Value[names(Value)] = ""
Value
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
data(infert)
for(i in names(infert)){
a = sample(15,1)
b = sample(nrow(infert),a)
infert[[i]][b] = NA
}
Current.Dir <- getwd(); setwd(tempdir())
Lexicographer(Directory = tempdir(), Data = infert)
Lexicographer(Directory = tempdir(), Data = infert)
Data = infert
Directory = tempdir()
# Check Pre-requisit --------
for(x in c("readxl", "writexl", "readr", "utils", "stats"))
if(!requireNamespace(x, quietly = T)){
install.packages(x)
requireNamespace(x, quietly = T)
}
# Check if Directory Grammar ----------
Directory = DirSetting(Dir = Directory)
# Check if Dictionary exists in the directory --------------
ClerkLog = Clerk(Directory)
## First Time ---------------------
if (!"Dictionary" %in% ClerkLog$File_Name) {
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Dictionary = list(Variable = Variable, Value = Value)
message("No Dictionary was found in the directory. Dictionary now is created.
<Note>
Currently, there is no additional option to individualize the dictionary name.
Therefore, please, do NOT manually modify the file name of the dictionary.
This however, does not restrict manual edits on the content within the dictionary.
In fact, we encourage users to go through the dictionary.
As a gentle reminder, Lexicographer can also be used to document newly created variable.")
writexl::write_xlsx(list(Variable = Variable, Value = Value), path = paste0(Directory,"/Dictionary.xlsx"))
# if(nrow(df) > 1024^2){
#   stop("the xlsx format does not support tables with 1M+ rows")
#  }
} else { ## If there is a dictionary already, import it -------------
Path = ClerkLog$File_Path[ClerkLog$File_Name == "Dictionary"]
Importer(Path)
Dictionary = get("Dictionary",envir = .GlobalEnv)
}
# Check if Directory Grammar ----------
Directory = DirSetting(Dir = Directory)
ClerkLog = Clerk(Directory)
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Dictionary = list(Variable = Variable, Value = Value)
message("No Dictionary was found in the directory. Dictionary now is created.
<Note>
Currently, there is no additional option to individualize the dictionary name.
Therefore, please, do NOT manually modify the file name of the dictionary.
This however, does not restrict manual edits on the content within the dictionary.
In fact, we encourage users to go through the dictionary.
As a gentle reminder, Lexicographer can also be used to document newly created variable.")
writexl::write_xlsx(list(Variable = Variable, Value = Value), path = paste0(Directory,"/Dictionary.xlsx"))
# if(nrow(df) > 1024^2){
#   stop("the xlsx format does not support tables with 1M+ rows")
#  }
} else { ## If there is a dictionary already, import it -------------
Path = ClerkLog$File_Path[ClerkLog$File_Name == "Dictionary"]
Importer(Path)
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
data(infert)
## Add NA
for(i in names(infert)){
a = sample(15,1)
b = sample(nrow(infert),a)
infert[[i]][b] = NA
}
# Change the Working Directory to the Default Temporary Directory
Current.Dir <- getwd(); setwd(tempdir())
Lexicographer(Directory = tempdir(), Data = infert)
View(Dictionary)
unload()
Dictionary$Variable
Dictionary$Value
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
WD = getwd()
devtools::load_all(WD)
document(WD)
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
WD = getwd()
devtools::load_all(WD)
QnA
devtools::load_all(WD)
devtools::load_all(WD)
document(WD)
WD = getwd()
devtools::load_all(WD)
document(WD)
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(devtools, lib.loc = "C:/Program Files/R/R-4.4.1/library")
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
QnA
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
QnA(Options,"decision")
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
QnA(Options,"decision")
WD = getwd()
devtools::load_all(WD)
document(WD)
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
QnA(Options,"decision")
WD = getwd()
devtools::load_all(WD)
document(WD)
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
QnA(Options,"decision")
WD = getwd()
devtools::load_all(WD)
document(WD)
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
QnA(Options,"decision")
# Check if Directory Grammar ----------
if(is.null(Directory) & "Dictionary" %in% Who_is("List")){
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
Decision = QnA(Options,"action")
if(Decision == 2) Dictionary = get("Dictionary",envir = .GlobalEnv)
}
Directory = NULL
# Check if Directory Grammar ----------
if(is.null(Directory) & "Dictionary" %in% Who_is("List")){
message("No directory was specified!
But a Dictionary has been loaded in the Global Environment.
Do you wish to create a new one or used the existing one.")
warning("To create a new Dictionary, the existing one will be removed from the Global Environment!")
Options = c("Create a new dictionary","Used existing dictionary in the Global Environment")
Decision = QnA(Options,"action")
if(Decision == 2) Dictionary = get("Dictionary",envir = .GlobalEnv)
}
DirSetting()
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
check(WD)
WD = getwd()
devtools::load_all(WD)
document(WD)
check(WD)
WD = getwd()
devtools::load_all(WD)
document(WD)
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
check(WD)
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
desc
desc()
desc <- desc()
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
desc$write()
WD = getwd()
devtools::load_all(WD)
document(WD)
R CMD check --as-cran
check --as-cran
desc$get_author()
desc$get_maintainer()
desc$add_author(given = "C. William", family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",orcid = "0000-0002-7234-7375")
desc$change_maintainer(given = "C. William", family = "Yao", email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca", orcid = "0000-0002-7234-7375")
desc$write()
desc <- desc()
desc$add_author(given = "C. William", family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",orcid = "0000-0002-7234-7375")
desc$change_maintainer(given = "C. William", family = "Yao", email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca", orcid = "0000-0002-7234-7375")
desc$write()
desc$set_authors("C. William","Yao",role = c("aut", "cre"),orcid = "0000-0002-7234-7375")
desc$set_authors(person("C. William","Yao",role = c("aut", "cre"),orcid = "0000-0002-7234-7375"))
desc$set_authors(person(given = "C. William",last = "Yao",role = c("aut", "cre"),comment = c(ORCID = "0000-0002-7234-7375")))
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"),comment = c(ORCID = "0000-0002-7234-7375")))
desc$write()
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set_maintainer(given = "C. William", family = "Yao", email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca", orcid = "0000-0002-7234-7375")
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$write()
WD = getwd()
desc <- desc()
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_version("1.9.0")
desc$set("Date","2021/07/19 (updated: `r Sys.Date()`)")
desc$set("Description","RHelper is a 'grocery store' library containing various functions, designed to simplify/document coding in R. For all users (including beginners), RHelper has simplified various data management procedures into one-line commands. These include mapping folder contents (Clerk), bulk data importation across various formats (Importer), and organizing the global environment (e.g., Who_is and Merger). For experienced users, RHelper features code logging (Historian) and systematic documentation for data preparation (Librarian). These functions can help users not only track their code execution but also improve reproducibility for future projects.")
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
WD = getwd()
desc <- desc()
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_version("1.9.0")
desc$set("Date","2021/07/19", (updated: `r Sys.Date()`))
WD = getwd()
desc <- desc()
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_version("1.9.0")
desc$set("Date",Sys.Date())
desc$set("Description","RHelper is a 'grocery store' library containing various functions, designed to simplify/document coding in R. For all users (including beginners), RHelper has simplified various data management procedures into one-line commands. These include mapping folder contents (Clerk), bulk data importation across various formats (Importer), and organizing the global environment (e.g., Who_is and Merger). For experienced users, RHelper features code logging (Historian) and systematic documentation for data preparation (Librarian). These functions can help users not only track their code execution but also improve reproducibility for future projects.")
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
paste0("2021/07/19", "Updated: ",Sys.Date())
WD = getwd()
desc <- desc()
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_version("1.9.0")
Date: paste0("2021/07/19  ", "Updated: ",Sys.Date())
WD = getwd()
desc <- desc()
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_version("1.9.0")
Date= paste0("2021/07/19  ", "Updated: ",Sys.Date())
desc$set("Date",Date)
desc$set("Description","RHelper is a 'grocery store' library containing various functions, designed to simplify/document coding in R. For all users (including beginners), RHelper has simplified various data management procedures into one-line commands. These include mapping folder contents (Clerk), bulk data importation across various formats (Importer), and organizing the global environment (e.g., Who_is and Merger). For experienced users, RHelper features code logging (Historian) and systematic documentation for data preparation (Librarian). These functions can help users not only track their code execution but also improve reproducibility for future projects.")
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
install.packages("pandoc")
Sys.Date()
WD = getwd()
desc <- desc()
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
desc <- desc()
desc$set_version("1.9.0")
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
Date= paste0("2021-07-19  ", "Updated: ",Sys.Date())
desc$set("Date",Sys.Date())
desc$set("Description","RHelper is a 'grocery store' library containing various functions, designed to simplify/document coding in R. For all users (including beginners), RHelper has simplified various data management procedures into one-line commands. These include mapping folder contents (Clerk), bulk data importation across various formats (Importer), and organizing the global environment (e.g., Who_is and Merger). For experienced users, RHelper features code logging (Historian) and systematic documentation for data preparation (Librarian). These functions can help users not only track their code execution but also improve reproducibility for future projects.")
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
WD = getwd()
desc <- desc()
desc$set_version("1.9.0")
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
Date= paste0("2021-07-19  ", "Updated: ",Sys.Date())
desc$set("Date",Sys.Date())
desc$set("Description","This package, RHelper, is a 'grocery store' library containing various functions, designed to simplify/document coding in R. For all users (including beginners), RHelper has simplified various data management procedures into one-line commands. These include mapping folder contents (Clerk), bulk data importation across various formats (Importer), and organizing the global environment (e.g., Who_is and Merger). For experienced users, RHelper features code logging (Historian) and systematic documentation for data preparation (Librarian). These functions can help users not only track their code execution but also improve reproducibility for future projects.")
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
devtools::build()
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
WD = getwd()
desc <- desc()
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
add_timestamp <- function() {
timestamp <- Sys.time()
writeLines(paste("Build Timestamp:", timestamp), con = "inst/build_timestamp.txt")
}
WD = getwd()
desc <- desc()
desc$set_version("1.9.0")
desc$set("Title","A R Package to Facilitate Coding in R")
desc$set_authors(person(given = "C. William",family = "Yao",role = c("aut", "cre"), email = "chun.william.yao.cnmtl@ssss.gouv.qc.ca",comment = c(ORCID = "0000-0002-7234-7375")))
desc$set("Author","C. William Yao [aut, cre] (<https://orcid.org/0000-0002-7234-7375>)")
desc$set("Maintainer", "C. William Yao <chun.william.yao.cnmtl@ssss.gouv.qc.ca>")
Date= paste0("2021-07-19  ", "Updated: ",Sys.Date())
desc$set("Date",Sys.Date())
desc$set("Description","A 'grocery store' library containing various functions, designed to simplify/document coding in R. For all users (including beginners), RHelper has simplified various data management procedures into one-line commands. These include mapping folder contents (Clerk), bulk data importation across various formats (Importer), and organizing the global environment (e.g., Who_is and Merger). For experienced users, RHelper features code logging (Historian) and systematic documentation for data preparation (Librarian). These functions can help users not only track their code execution but also improve reproducibility for future projects.")
desc$set_dep("R", type = "Depends", version = ">= 3.1.0")
for(i in c("readxl","haven","readr","stringi","utils","methods","writexl","tools","readr","stats")){
desc$set_dep(i,type = "Imports")
}
desc$set("Imports","https://github.com/cwy20030/RHelper/issues")
use_gpl3_license()
devtools::load_all(WD)
document(WD)
desc$set_urls("https://github.com/cwy20030/RHelper")
desc$set("BugReports","https://github.com/cwy20030/RHelper/issues")
desc$set("Encoding", "UTF-8")
desc$set("ByteCompile", "true")
desc$set("LazyData", "true")
desc$write()
remove.packages("yaml", lib="C:/Program Files/R/R-4.4.1/library")
install.packages("yaml")

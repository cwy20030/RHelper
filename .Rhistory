names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Form = list(Variable,Value)
## Step 2: Go Through the Variables and Extract Information -----------
### Variable Class -------------------
Class = sapply(Data,function(cl){
# Check if the variable is all numbers
## If yes, turn them into numeric form
if(all(grepl("^\\d+$", cl))) cl = as.numeric(as.character(cl))
# Non-character Variables
if(!any(is.character(cl),is.factor(cl))){
UniqueValues = unique(na.omit(cl))
## Binary Charactersitics ------------------
NUnique = length(UniqueValues)
## Check Ordinal Variables -------------------
# Get differences between sorted unique values
diffs <- diff(sort(UniqueValues))
if(NUnique == 2) { ## Binary
"binary"
} else if (all(diffs == diffs[1])) {   ## Ordinal:  Check if all differences are equal
"ordinal/categorical"
} else {
"numeric"
}
} else {
class(cl)
}
})
#### Record Variables into the Dictionary Template --------------
Form$Variable$Variable = names(Data)
Form$Variable$Type = Class
### Unique Values -----------------------------
UniqueValues = sapply(Data,function(cl){
UniqueLevel = unique(cl)
NAValue = UniqueLevel[which(is.na(UniqueLevel))]
if(length(UniqueLevel)>20) UniqueLevel = NAValue
UniqueLevel
})
repLength = sapply(UniqueValues,length)
### Variable Names
var = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(names(repLength)[[x]],repLength[[x]])
}))
### Variable Type
typ = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(Class[[x]],repLength[[x]])
}))
#### Record Variables into the Dictionary Template --------------
Form$Value$Variable = var
Form$Value$Type = typ
Form$Value$Value = unname(unlist(UniqueValues))
return(Form)
}
# Check Pre-requisit --------
for(x in c("readxl", "writexl", "readr", "utils"))
if(!requireNamespace(x, quietly = T)){
install.packages(x)
requireNamespace(x, quietly = T)
}
# Check if Directory Grammar ----------
Directory = DirSetting(Dir = Directory)
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Dictionary = list(Variable,Value)
message("No Dictionary was found in the directory. Dictionary now is created.
<Note>
Currently, there is no additional option to individualize the dictionary name.
Therefore, please, do NOT manually modify the file name of the dictionary.
This however, does not restrict manual edits on the content within the dictionary.
In fact, we encourage users to go through the dictionary.
As a gentle reminder, Lexicographer can also be used to document newly created variable.")
VNames = names(Data)
Exclude = VNames[VNames %in% Dictionary$Variable$Variable]
SubData = Data[VNames[!VNames %in% Exclude]] # Subset Data for New Variable Documentation
Update = VDocument(SubData)
Update
View(Update)
Form = list(Variable=Variable,Value=Value)
View(Form)
#' @param Data a data.frame
#' @return A Fillout Dictionary Template
VDocument = function(Data){
## Step 1: Create a Dictionary Template --------------
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Form = list(Variable=Variable,Value=Value)
## Step 2: Go Through the Variables and Extract Information -----------
### Variable Class -------------------
Class = sapply(Data,function(cl){
# Check if the variable is all numbers
## If yes, turn them into numeric form
if(all(grepl("^\\d+$", cl))) cl = as.numeric(as.character(cl))
# Non-character Variables
if(!any(is.character(cl),is.factor(cl))){
UniqueValues = unique(na.omit(cl))
## Binary Charactersitics ------------------
NUnique = length(UniqueValues)
## Check Ordinal Variables -------------------
# Get differences between sorted unique values
diffs <- diff(sort(UniqueValues))
if(NUnique == 2) { ## Binary
"binary"
} else if (all(diffs == diffs[1])) {   ## Ordinal:  Check if all differences are equal
"ordinal/categorical"
} else {
"numeric"
}
} else {
class(cl)
}
})
#### Record Variables into the Dictionary Template --------------
Form$Variable$Variable = names(Data)
Form$Variable$Type = Class
### Unique Values -----------------------------
UniqueValues = sapply(Data,function(cl){
UniqueLevel = unique(cl)
NAValue = UniqueLevel[which(is.na(UniqueLevel))]
if(length(UniqueLevel)>20) UniqueLevel = NAValue
UniqueLevel
})
repLength = sapply(UniqueValues,length)
### Variable Names
var = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(names(repLength)[[x]],repLength[[x]])
}))
### Variable Type
typ = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(Class[[x]],repLength[[x]])
}))
#### Record Variables into the Dictionary Template --------------
Form$Value$Variable = var
Form$Value$Type = typ
Form$Value$Value = unname(unlist(UniqueValues))
return(Form)
}
VNames = names(Data)
Exclude = VNames[VNames %in% Dictionary$Variable$Variable]
SubData = Data[VNames[!VNames %in% Exclude]] # Subset Data for New Variable Documentation
Update = VDocument(SubData)
VNames = names(Data)
Exclude = VNames[VNames %in% Dictionary$Variable$Variable]
SubData = Data[VNames[!VNames %in% Exclude]] # Subset Data for New Variable Documentation
Update = VDocument(SubData)
Data
## Step 1: Create a Dictionary Template --------------
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Form = list(Variable=Variable,Value=Value)
## Step 2: Go Through the Variables and Extract Information -----------
### Variable Class -------------------
Class = sapply(Data,function(cl){
# Check if the variable is all numbers
## If yes, turn them into numeric form
if(all(grepl("^\\d+$", cl))) cl = as.numeric(as.character(cl))
# Non-character Variables
if(!any(is.character(cl),is.factor(cl))){
UniqueValues = unique(na.omit(cl))
## Binary Charactersitics ------------------
NUnique = length(UniqueValues)
## Check Ordinal Variables -------------------
# Get differences between sorted unique values
diffs <- diff(sort(UniqueValues))
if(NUnique == 2) { ## Binary
"binary"
} else if (all(diffs == diffs[1])) {   ## Ordinal:  Check if all differences are equal
"ordinal/categorical"
} else {
"numeric"
}
} else {
class(cl)
}
})
#### Record Variables into the Dictionary Template --------------
Form$Variable$Variable = names(Data)
#### Record Variables into the Dictionary Template --------------
Form$Variable$Variable = names(Data)
names(Data)
Class
Form$Variable$Variable = names(Data)
unname(Class)
#### Record Variables into the Dictionary Template --------------
Form$Variable$Variable = names(Data)
Variable = data.frame(matrix(nrow = length(names(Data)), ncol = 5))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
Variable$Variable = names(Data)
Variable$Type = unname(Class)
Value =  data.frame(matrix(nrow = length(var), ncol = 6))
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Value$Variable = var
Value$Type = typ
### Unique Values -----------------------------
UniqueValues = sapply(Data,function(cl){
UniqueLevel = unique(cl)
NAValue = UniqueLevel[which(is.na(UniqueLevel))]
if(length(UniqueLevel)>20) UniqueLevel = NAValue
UniqueLevel
})
repLength = sapply(UniqueValues,length)
### Variable Names
var = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(names(repLength)[[x]],repLength[[x]])
}))
### Variable Type
typ = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(Class[[x]],repLength[[x]])
}))
#### Record Variables into the Dictionary Template --------------
Value =  data.frame(matrix(nrow = length(var), ncol = 6))
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Value$Variable = var
Value$Type = typ
Value$Value = unname(unlist(UniqueValues))
Form = list(Variable=Variable,Value=Value)
return(Form)
#' @param Data a data.frame
#' @return A Fillout Dictionary Template
VDocument = function(Data){
## Step 1: Go Through the Variables and Extract Information -----------
### Variable Class -------------------
Class = sapply(Data,function(cl){
# Check if the variable is all numbers
## If yes, turn them into numeric form
if(all(grepl("^\\d+$", cl))) cl = as.numeric(as.character(cl))
# Non-character Variables
if(!any(is.character(cl),is.factor(cl))){
UniqueValues = unique(na.omit(cl))
## Binary Charactersitics ------------------
NUnique = length(UniqueValues)
## Check Ordinal Variables -------------------
# Get differences between sorted unique values
diffs <- diff(sort(UniqueValues))
if(NUnique == 2) { ## Binary
"binary"
} else if (all(diffs == diffs[1])) {   ## Ordinal:  Check if all differences are equal
"ordinal/categorical"
} else {
"numeric"
}
} else {
class(cl)
}
})
#### Record Variables into the Dictionary Template --------------
Variable = data.frame(matrix(nrow = length(names(Data)), ncol = 5))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
Variable$Variable = names(Data)
Variable$Type = unname(Class)
### Unique Values -----------------------------
UniqueValues = sapply(Data,function(cl){
UniqueLevel = unique(cl)
NAValue = UniqueLevel[which(is.na(UniqueLevel))]
if(length(UniqueLevel)>20) UniqueLevel = NAValue
UniqueLevel
})
repLength = sapply(UniqueValues,length)
### Variable Names
var = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(names(repLength)[[x]],repLength[[x]])
}))
### Variable Type
typ = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(Class[[x]],repLength[[x]])
}))
#### Record Variables into the Dictionary Template --------------
Value =  data.frame(matrix(nrow = length(var), ncol = 6))
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Value$Variable = var
Value$Type = typ
Value$Value = unname(unlist(UniqueValues))
## Step 2: Create a Dictionary Template --------------
Form = list(Variable=Variable,Value=Value)
return(Form)
}
Update = VDocument(SubData)
Update
warning(paste0("Following variables ", paste0(Exclude,collapse = ", ") ," had been documented in prior session. "))
length(Exclude)>0
Exclude = VNames[VNames %in% Dictionary$Variable$Variable]
Exclude
length(Exclude)
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Dictionary = list(Variable = Variable, Value = Value)
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
unload()
devtools::load_all(WD)
document(WD)
unload()
View(iris)
WD = getwd()
devtools::load_all(WD)
document(WD)
??Lexicographer
??gsub
??VDocument
data("pressure")
pressure
infert
data("infert")
sample(nrow(infert),3)
data(infert)
for(i in names(infert)){
a = sample(15,1)
b = sample(nrow(infert),a)
infert[[i]][b] = NA
}
View(infert)
Current.Dir <- getwd(); setwd(tempdir())
Lexicographer(Directory = tempdir(), Data = infert)
View(Dictionary)
View(Dictionary$Value)
Data = infert
## Step 1: Go Through the Variables and Extract Information -----------
### Variable Class -------------------
Class = sapply(Data,function(cl){
# Check if the variable is all numbers
## If yes, turn them into numeric form
if(all(grepl("^\\d+$", cl))) cl = as.numeric(as.character(cl))
# Non-character Variables
if(!any(is.character(cl),is.factor(cl))){
UniqueValues = unique(na.omit(cl))
## Binary Charactersitics ------------------
NUnique = length(UniqueValues)
## Check Ordinal Variables -------------------
# Get differences between sorted unique values
diffs <- diff(sort(UniqueValues))
if(NUnique == 2) { ## Binary
"binary"
} else if (all(diffs == diffs[1])) {   ## Ordinal:  Check if all differences are equal
"ordinal/categorical"
} else {
"numeric"
}
} else {
class(cl)
}
})
#### Record Variables into the Dictionary Template --------------
Variable = data.frame(matrix(nrow = length(names(Data)), ncol = 5))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
Variable$Variable = names(Data)
Variable$Type = unname(Class)
### Unique Values -----------------------------
UniqueValues = sapply(Data,function(cl){
UniqueLevel = unique(cl)
NAValue = UniqueLevel[which(is.na(UniqueLevel))]
if(length(UniqueLevel)>20) UniqueLevel = NAValue
UniqueLevel
})
repLength = sapply(UniqueValues,length)
### Variable Names
var = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(names(repLength)[[x]],repLength[[x]])
}))
### Variable Type
typ = unlist(sapply(1:length(repLength), function(x){
if(repLength[[x]]>0) rep(Class[[x]],repLength[[x]])
}))
car
var
unname(unlist(UniqueValues))
length(UniqueValues)
length(UniqueValues)
length(unlist(UniqueValues))
Value[names(Value)] = ""
Value =  data.frame(matrix(nrow = length(var), ncol = 6))
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Value[names(Value)] = ""
Value
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
data(infert)
for(i in names(infert)){
a = sample(15,1)
b = sample(nrow(infert),a)
infert[[i]][b] = NA
}
Current.Dir <- getwd(); setwd(tempdir())
Lexicographer(Directory = tempdir(), Data = infert)
Lexicographer(Directory = tempdir(), Data = infert)
Data = infert
Directory = tempdir()
# Check Pre-requisit --------
for(x in c("readxl", "writexl", "readr", "utils", "stats"))
if(!requireNamespace(x, quietly = T)){
install.packages(x)
requireNamespace(x, quietly = T)
}
# Check if Directory Grammar ----------
Directory = DirSetting(Dir = Directory)
# Check if Dictionary exists in the directory --------------
ClerkLog = Clerk(Directory)
## First Time ---------------------
if (!"Dictionary" %in% ClerkLog$File_Name) {
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Dictionary = list(Variable = Variable, Value = Value)
message("No Dictionary was found in the directory. Dictionary now is created.
<Note>
Currently, there is no additional option to individualize the dictionary name.
Therefore, please, do NOT manually modify the file name of the dictionary.
This however, does not restrict manual edits on the content within the dictionary.
In fact, we encourage users to go through the dictionary.
As a gentle reminder, Lexicographer can also be used to document newly created variable.")
writexl::write_xlsx(list(Variable = Variable, Value = Value), path = paste0(Directory,"/Dictionary.xlsx"))
# if(nrow(df) > 1024^2){
#   stop("the xlsx format does not support tables with 1M+ rows")
#  }
} else { ## If there is a dictionary already, import it -------------
Path = ClerkLog$File_Path[ClerkLog$File_Name == "Dictionary"]
Importer(Path)
Dictionary = get("Dictionary",envir = .GlobalEnv)
}
# Check if Directory Grammar ----------
Directory = DirSetting(Dir = Directory)
ClerkLog = Clerk(Directory)
Variable = data.frame(matrix(ncol = 5))
Value =  data.frame(matrix(ncol = 6))
names(Variable)  = c("Variable", "Type",	"Unit",	"Definition", "Note")
names(Value)  =   c("Variable",	"Type",	"Unit", "Value", "Definition", "Note")
Dictionary = list(Variable = Variable, Value = Value)
message("No Dictionary was found in the directory. Dictionary now is created.
<Note>
Currently, there is no additional option to individualize the dictionary name.
Therefore, please, do NOT manually modify the file name of the dictionary.
This however, does not restrict manual edits on the content within the dictionary.
In fact, we encourage users to go through the dictionary.
As a gentle reminder, Lexicographer can also be used to document newly created variable.")
writexl::write_xlsx(list(Variable = Variable, Value = Value), path = paste0(Directory,"/Dictionary.xlsx"))
# if(nrow(df) > 1024^2){
#   stop("the xlsx format does not support tables with 1M+ rows")
#  }
} else { ## If there is a dictionary already, import it -------------
Path = ClerkLog$File_Path[ClerkLog$File_Name == "Dictionary"]
Importer(Path)
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
data(infert)
## Add NA
for(i in names(infert)){
a = sample(15,1)
b = sample(nrow(infert),a)
infert[[i]][b] = NA
}
# Change the Working Directory to the Default Temporary Directory
Current.Dir <- getwd(); setwd(tempdir())
Lexicographer(Directory = tempdir(), Data = infert)
View(Dictionary)
unload()
Dictionary$Variable
Dictionary$Value
devtools::dev_sitrep()
#devtools::install_dev_deps()
devtools::update_packages("devtools")
library(devtools)
library(roxygen2)
library(testthat)
library(desc)
WD = getwd()
WD = getwd()
devtools::load_all(WD)
document(WD)
WD = getwd()
devtools::load_all(WD)
document(WD)
